        - function wall_dGx_pos(globaldata, idx, configData, phi_i, phi_k)
        - 
        0     power::Float64 = configData["core"]["power"]::Float64
        0     limiter_flag::Float64 = configData["core"]["limiter_flag"]::Float64
        - 
        -     sum_delx_sqr = zero(Float64)
        -     sum_dely_sqr = zero(Float64)
        -     sum_delx_dely = zero(Float64)
        - 
    71232     sum_delx_delf = zeros(Float64, 4)
    71232     sum_dely_delf = zeros(Float64, 4)
        - 
        0     x_i = globaldata[idx].x
        0     y_i = globaldata[idx].y
        - 
        0     nx = globaldata[idx].nx
        0     ny = globaldata[idx].ny
        - 
        -     tx::Float64 = ny
        0     ty::Float64 = -nx
        - 
    71232     G_i = zeros(Float64,4)
    71232     G_k = zeros(Float64,4)
    71232     result = zeros(Float64,4)
        -     # phi_i = zeros(Float64,4)
        -     # phi_k = zeros(Float64,4)
        - 
        0     for itm in globaldata[idx].xpos_conn
        - 
        0         x_k = globaldata[itm].x
        0         y_k = globaldata[itm].y
        - 
        0         delx = x_k - x_i
        0         dely = y_k - y_i
        - 
        0         dels = delx*tx + dely*ty
        0         deln = delx*nx + dely*ny
        - 
        0         dist = hypot(dels, deln)
        0         weights = dist^power
        - 
        0         dels_weights = dels*weights
        0         deln_weights = deln*weights
        - 
        0         sum_delx_sqr = sum_delx_sqr + dels*dels_weights
        0         sum_dely_sqr = sum_dely_sqr + deln*deln_weights
        0         sum_delx_dely = sum_delx_dely + dels*deln_weights
        - 
   284928         qtilde_i = @. globaldata[idx].q - 0.5*(delx * globaldata[idx].dq[1] + dely * globaldata[idx].dq[2])
   284928         qtilde_k = @. globaldata[itm].q - 0.5*(delx * globaldata[itm].dq[1] + dely * globaldata[itm].dq[2])
        - 
        -         # if idx == 3
        -         #     println(IOContext(stdout, :compact => false), itm)
        -         #     println(IOContext(stdout, :compact => false), qtilde_k)
        -         # end
        - 
        0         if limiter_flag == 1
        0             venkat_limiter(qtilde_i, globaldata, idx, configData, phi_i)
        0             venkat_limiter(qtilde_k, globaldata, idx, configData, phi_k)
   366336             qtilde_i = @. globaldata[idx].q - 0.5 * phi_i * (delx*globaldata[idx].dq[1] + dely*globaldata[idx].dq[2])
   366336             qtilde_k = @. globaldata[itm].q - 0.5 * phi_k * (delx*globaldata[itm].dq[1] + dely*globaldata[itm].dq[2])
        -         end
        - 
        -         # if idx == 3
        -         #     println(IOContext(stdout, :compact => false), itm)
        -         #     println(IOContext(stdout, :compact => false), phi_i)
        -         #     println(IOContext(stdout, :compact => false), phi_k)
        -         #     println(IOContext(stdout, :compact => false), qtilde_k)
        -         # end
        - 
        0         if limiter_flag == 2
        0             maxi = max_q_values(globaldata, idx)
        0             mini = min_q_values(globaldata, idx)
        - 
        0             for i in 1:4
        0                 if qtilde_i[i] > maxi[i]
        0                     qtilde_i[i] = maxi[i]
        -                 end
        0                 if qtilde_i[i] < mini[i]
        0                     qtilde_i[i] = mini[i]
        -                 end
        0                 if qtilde_k[i] > maxi[i]
        0                     qtilde_k[i] = maxi[i]
        -                 end
        0                 if qtilde_k[i] < mini[i]
        0                     qtilde_k[i] = mini[i]
        -                 end
        -             end
        -         end
        -         # if idx == 76
        -         #     println("qtile_i ", qtilde_i)
        -         #     println("qtile_k ", qtilde_k)
        -         # end
        0         if idx == 100
        -             flag = 0
        -         else
        -             flag = 1
        -         end
        - 
        -         # if idx == 3
        -         #     println(IOContext(stdout, :compact => false), result)
        -         # end
    40704         qtilde_to_primitive(result, qtilde_i, configData)
        -         # if idx == 3
        -         #     println(IOContext(stdout, :compact => false), itm)
        -         #     println(IOContext(stdout, :compact => false), result)
        -         # end
        0         flux_quad_GxII(G_i, nx, ny, result[1], result[2], result[3], result[4], flag)
        -         # if idx == 3
        -         #     println(IOContext(stdout, :compact => false), result)
        -         # end
    40704         qtilde_to_primitive(result, qtilde_k, configData)
        -         # if idx == 3
        -         #     println(IOContext(stdout, :compact => false), result)
        -         # end
        0         flux_quad_GxII(G_k, nx, ny, result[1], result[2], result[3], result[4], flag)
        -         # if idx == 100
        -         #     println("****")
        -         #     println(IOContext(stdout, :compact => false), phi_i)
        -         #     println(IOContext(stdout, :compact => false), phi_k)
        -         #     println(IOContext(stdout, :compact => false), qtilde_i)
        -         #     println(IOContext(stdout, :compact => false), qtilde_k)
        -         #     println(IOContext(stdout, :compact => false), itm)
        -         #     println(IOContext(stdout, :compact => false), result)
        -         #     println(IOContext(stdout, :compact => false), G_i)
        -         #     println(IOContext(stdout, :compact => false), G_k)
        -         #     # println(IOContext(stdout, :compact => false), dels_weights)
        -         #     # println(IOContext(stdout, :compact => false), deln_weights)
        -         #     println("****")
        -         # end
        -         # if idx == 3
        -         #     println(IOContext(stdout, :compact => false), itm)
        -         #     println(IOContext(stdout, :compact => false), result)
        -         #     println(IOContext(stdout, :compact => false), G_i)
        -         #     println(IOContext(stdout, :compact => false), G_k)
        -         #     # println(IOContext(stdout, :compact => false), dels_weights)
        -         #     # println(IOContext(stdout, :compact => false), deln_weights)
        -         # end
   284928         sum_delx_delf = @. sum_delx_delf + (G_k - G_i) * dels_weights
   284928         sum_dely_delf = @. sum_dely_delf + (G_k - G_i) * deln_weights
        -     end
        - 
        0     det = @. sum_delx_sqr*sum_dely_sqr - sum_delx_dely*sum_delx_dely
        0     one_by_det = 1.0 / det
    71232     G = @. (sum_delx_delf*sum_dely_sqr - sum_dely_delf*sum_delx_dely)*one_by_det
        -     # if idx == 3
        -     #     println(IOContext(stdout, :compact => false), "===Gx===")
        -     #     # println(IOContext(stdout, :compact => false), sum_delx_sqr)
        -     #     # println(IOContext(stdout, :compact => false), sum_dely_sqr)
        -     #     # println(IOContext(stdout, :compact => false), sum_delx_dely)
        -     #     # println(IOContext(stdout, :compact => false), det)
        -     #     # println(IOContext(stdout, :compact => false), one_by_det)
        -     #     println(IOContext(stdout, :compact => false), sum_delx_delf)
        -     #     println(IOContext(stdout, :compact => false), sum_dely_delf)
        -     #     println(IOContext(stdout, :compact => false), G)
        -     #     println()
        -     # end
        0     return G
        - end
        - 
        - function wall_dGx_neg(globaldata, idx, configData, phi_i, phi_k)
        - 
        0     power::Float64 = configData["core"]["power"]::Float64
        0     limiter_flag::Float64 = configData["core"]["limiter_flag"]::Float64
        - 
        -     sum_delx_sqr = zero(Float64)
        -     sum_dely_sqr = zero(Float64)
        -     sum_delx_dely = zero(Float64)
        - 
    71232     sum_delx_delf = zeros(Float64, 4)
    71232     sum_dely_delf = zeros(Float64, 4)
        - 
        0     x_i = globaldata[idx].x
        0     y_i = globaldata[idx].y
        - 
        0     nx = globaldata[idx].nx
        0     ny = globaldata[idx].ny
        - 
        -     tx = ny
        0     ty = -nx
        - 
    71232     G_i = zeros(Float64,4)
    71232     G_k = zeros(Float64,4)
    71232     result = zeros(Float64,4)
        -     # phi_i = zeros(Float64,4)
        -     # phi_k = zeros(Float64,4)
        - 
        0     for itm in globaldata[idx].xneg_conn
        - 
        0         x_k = globaldata[itm].x
        0         y_k = globaldata[itm].y
        - 
        0         delx = x_k - x_i
        0         dely = y_k - y_i
        - 
        0         dels = delx*tx + dely*ty
        0         deln = delx*nx + dely*ny
        - 
        0         dist = hypot(dels, deln)
        0         weights = dist^power
        - 
        0         dels_weights = dels*weights
        0         deln_weights = deln*weights
        - 
        0         sum_delx_sqr = sum_delx_sqr + dels*dels_weights
        0         sum_dely_sqr = sum_dely_sqr + deln*deln_weights
        - 
        0         sum_delx_dely = sum_delx_dely + dels*deln_weights
        - 
   284928         qtilde_i = @. globaldata[idx].q - 0.5*(delx*globaldata[idx].dq[1] + dely*globaldata[idx].dq[2])
   284928         qtilde_k = @. globaldata[itm].q - 0.5*(delx*globaldata[itm].dq[1] + dely*globaldata[itm].dq[2])
        - 
        0         if limiter_flag == 1
        0             venkat_limiter(qtilde_i, globaldata, idx, configData, phi_i)
        0             venkat_limiter(qtilde_k, globaldata, idx, configData, phi_k)
   366336             qtilde_i = @. globaldata[idx].q - 0.5 * phi_i * (delx*globaldata[idx].dq[1] + dely*globaldata[idx].dq[2])
   366336             qtilde_k = @. globaldata[itm].q - 0.5 * phi_k * (delx*globaldata[itm].dq[1] + dely*globaldata[itm].dq[2])
        -         end
        - 
        0         if limiter_flag == 2
        0             maxi = max_q_values(globaldata, idx)
        0             mini = min_q_values(globaldata, idx)
        - 
        0             for i in 1:4
        0                 if qtilde_i[i] > maxi[i]
        0                     qtilde_i[i] = maxi[i]
        -                 end
        0                 if qtilde_i[i] < mini[i]
        0                     qtilde_i[i] = mini[i]
        -                 end
        0                 if qtilde_k[i] > maxi[i]
        0                     qtilde_k[i] = maxi[i]
        -                 end
        0                 if qtilde_k[i] < mini[i]
        0                     qtilde_k[i] = mini[i]
        -                 end
        -             end
        -         end
    40704         qtilde_to_primitive(result, qtilde_i, configData)
        0         flux_quad_GxI(G_i, nx, ny, result[1], result[2], result[3], result[4])
        - 
    40704         qtilde_to_primitive(result, qtilde_k, configData)
        0         flux_quad_GxI(G_k, nx, ny, result[1], result[2], result[3], result[4])
        - 
   284928         sum_delx_delf = @. sum_delx_delf + (G_k - G_i) * dels_weights
   284928         sum_dely_delf = @. sum_dely_delf + (G_k - G_i) * deln_weights
        - 
        -     end
        0     det = @. sum_delx_sqr*sum_dely_sqr - sum_delx_dely*sum_delx_dely
        0     one_by_det = 1.0 / det
    71232     G = @. (sum_delx_delf*sum_dely_sqr - sum_dely_delf*sum_delx_dely)*one_by_det
        0     return G
        - end
        - 
        - function wall_dGy_neg(globaldata, idx, configData, phi_i, phi_k)
        - 
        0     power::Float64 = configData["core"]["power"]::Float64
        0     limiter_flag::Float64 = configData["core"]["limiter_flag"]::Float64
        - 
        -     sum_delx_sqr = zero(Float64)
        -     sum_dely_sqr = zero(Float64)
        -     sum_delx_dely = zero(Float64)
        - 
    71232     sum_delx_delf = zeros(Float64, 4)
    71232     sum_dely_delf = zeros(Float64, 4)
        - 
        0     x_i = globaldata[idx].x
        0     y_i = globaldata[idx].y
        - 
        0     nx = globaldata[idx].nx
        0     ny = globaldata[idx].ny
        - 
        -     tx = ny
        0     ty = -nx
        - 
    71232     G_i = zeros(Float64,4)
    71232     G_k = zeros(Float64,4)
    71232     result = zeros(Float64,4)
        -     # phi_i = zeros(Float64,4)
        -     # phi_k = zeros(Float64,4)
        - 
        0     for itm in globaldata[idx].yneg_conn
        - 
        0         x_k = globaldata[itm].x
        0         y_k = globaldata[itm].y
        - 
        0         delx = x_k - x_i
        0         dely = y_k - y_i
        - 
        0         dels = delx*tx + dely*ty
        0         deln = delx*nx + dely*ny
        - 
        0         dist = hypot(dels, deln)
        0         weights = dist^power
        - 
        0         dels_weights = dels*weights
        0         deln_weights = deln*weights
        - 
        0         sum_delx_sqr = sum_delx_sqr + dels*dels_weights
        0         sum_dely_sqr = sum_dely_sqr + deln*deln_weights
        - 
        0         sum_delx_dely = sum_delx_dely + dels*deln_weights
        - 
   569856         qtilde_i = @. globaldata[idx].q - 0.5*(delx*globaldata[idx].dq[1] + dely*globaldata[idx].dq[2])
   569856         qtilde_k = @. globaldata[itm].q - 0.5*(delx*globaldata[itm].dq[1] + dely*globaldata[itm].dq[2])
        - 
        0         if limiter_flag == 1
        0             venkat_limiter(qtilde_i, globaldata, idx, configData, phi_i)
        0             venkat_limiter(qtilde_k, globaldata, idx, configData, phi_k)
   732672             qtilde_i = @. globaldata[idx].q - 0.5 * phi_i * (delx*globaldata[idx].dq[1] + dely*globaldata[idx].dq[2])
   732672             qtilde_k = @. globaldata[itm].q - 0.5 * phi_k * (delx*globaldata[itm].dq[1] + dely*globaldata[itm].dq[2])
        -         end
        0         if limiter_flag == 2
        0             maxi = max_q_values(globaldata, idx)
        0             mini = min_q_values(globaldata, idx)
        - 
        0             for i in 1:4
        0                 if qtilde_i[i] > maxi[i]
        0                     qtilde_i[i] = maxi[i]
        -                 end
        0                 if qtilde_i[i] < mini[i]
        0                     qtilde_i[i] = mini[i]
        -                 end
        0                 if qtilde_k[i] > maxi[i]
        0                     qtilde_k[i] = maxi[i]
        -                 end
        0                 if qtilde_k[i] < mini[i]
        0                     qtilde_k[i] = mini[i]
        -                 end
        -             end
        -         end
    81408         qtilde_to_primitive(result, qtilde_i, configData)
        0         flux_Gyn(G_i, nx, ny, result[1], result[2], result[3], result[4])
        - 
    81408         qtilde_to_primitive(result, qtilde_k, configData)
        0         flux_Gyn(G_k, nx, ny, result[1], result[2], result[3], result[4])
        - 
   569856         sum_delx_delf = @. sum_delx_delf + (G_k - G_i) * dels_weights
   569856         sum_dely_delf = @. sum_dely_delf + (G_k - G_i) * deln_weights
        -         # if idx == 3
        -         #     println(IOContext(stdout, :compact => false), itm)
        -         #     println(IOContext(stdout, :compact => false), result)
        -         #     println(IOContext(stdout, :compact => false), G_i)
        -         #     println(IOContext(stdout, :compact => false), G_k)
        -         # end
        -     end
        - 
        0     det = @. sum_delx_sqr*sum_dely_sqr - sum_delx_dely*sum_delx_dely
        0     one_by_det = 1.0 / det
    71232     G = @. (sum_dely_delf*sum_delx_sqr - sum_delx_delf*sum_delx_dely)*one_by_det
        -     # if idx == 3
        -     #     println(IOContext(stdout, :compact => false), "===Gx===")
        -     #     println(IOContext(stdout, :compact => false), sum_delx_delf)
        -     #     println(IOContext(stdout, :compact => false), sum_dely_delf)
        -     #     # println(IOContext(stdout, :compact => false), G)
        -     #     # println()
        -     # end
        0     return G
        - end
        - 
